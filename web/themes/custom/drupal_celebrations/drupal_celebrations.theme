<?php

use Drupal\Component\Utility\Html;
use Drupal\user\Entity\User;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_preprocess_block().
 */
function drupal_celebrations_preprocess_block(&$variables) {
  $variables['title_attributes']['class'][] = 'block__title';
  // Add a class indicating the custom block bundle.
  if (isset($variables['elements']['content']['#block_content'])) {
    $variables['attributes']['class'][] = Html::getClass('block-type-' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function drupal_celebrations_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupal_celebrations_preprocess_node(&$variables) {
  /** @var $node \Drupal\node\Entity\Node */
  $node = $variables['node'];
  if ($node->hasField('field_hero') && !$node->get('field_hero')->isEmpty()) {
    unset($variables['label']);
  }
  // Append the author card view.
  if ($node->bundle() === 'image' || $node->bundle() === 'video') {
    $authorId = $node->getOwnerId();
    // The user could have been deleted after node creation
    // and assigned to anonymous.
    if ($authorId !== 0) {
      $author = User::load($authorId);
      $viewBuilder = Drupal::entityTypeManager()->getViewBuilder($author->getEntityTypeId());
      $variables['author_card'] = $viewBuilder->view($author, 'card');
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function drupal_celebrations_preprocess_paragraph__hero(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $variables['title'] = [
    '#type' => 'page_title',
    '#title' => \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject()),
  ];
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupal_celebrations_preprocess_html(&$variables) {
  // Use debug theming only if development mode of twig is enabled.
  $container = \Drupal::getContainer();
  $twig_config = $container->hasParameter('twig.config') ? $container->getParameter('twig.config'): [];
  if (isset($twig_config['debug']) && $twig_config['debug']) {
    $variables['attributes']['class'][] = 'debug';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form element templates.
 */
function drupal_celebrations_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  // Define the view mode.
  $mode = $variables['elements']['#view_mode'];

  // Create a theme hook suggestion which has the view mode name in it.
  $suggestions[] = 'user__' . $mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form element templates.
 */
function drupal_celebrations_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables["element"]["#name"])) {
    // Drupal executes theme suggestion for every element from multivalue field,
    // so name looks like field_name[0][value]. We need only field_name part
    // of it.
    $name = explode("[" , $variables["element"]["#name"], 2);
    $suggestions[] = $variables["theme_hook_original"] . "__" . $name[0];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupal_celebrations_preprocess_field(&$variables) {
  $categoryFields = ['field_video_category', 'field_image_category'];
  if (in_array($variables['field_name'], $categoryFields)) {
    $categoryClasses = [
      'inline-block',
      'px-3',
      'py-1',
      'text-sm',
      'font-semibold',
      'mr-2',
      'mb-2',
    ];

    /** @var \Drupal\color_map\ColorMap $colorMap */
    $colorMap = Drupal::service('color_map');
    foreach ($variables['items'] as &$item) {
      $color = '';
      if (
        array_key_exists('content', $item) &&
        array_key_exists('#options', $item['content']) &&
        array_key_exists('entity', $item['content']['#options']) &&
        $item['content']['#options']['entity'] instanceof TermInterface
      ) {
        /** @var \Drupal\taxonomy\TermInterface $term */
        $term = $item['content']['#options']['entity'];
        if (
          $term->hasField('field_accent_colour') &&
          !$term->get('field_accent_colour')->isEmpty()
        ) {
          $color = $term->get('field_accent_colour')->getValue()[0]['color'];
        }
      }
      $categoryClasses[] = 'bg-' . $colorMap->getTailwindClass($color);
      $categoryClasses[] = 'text-' . $colorMap->getTailwindContrastClass($color);
      if (!array_key_exists('#attributes', $item['content'])) {
        $item['content']['#attributes'] = [];
      }
      if (!array_key_exists('class', $item['content']['#attributes'])) {
        $item['content']['#attributes']['class'] = [];
      }
      $item['content']['#attributes']['class'] = array_merge(
        $item['content']['#attributes']['class'],
        $categoryClasses
      );
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupal_celebrations_preprocess_views_view_unformatted(&$variables) {
  if (array_key_exists('view', $variables)) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = $variables['view'];
    $variables['view_id'] = $view->id();
    $variables['view_display_id'] = $view->current_display;
  }
}
